package get

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new get API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for get API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ListSnapshots lists snapshots

Retrieve all ids of this type of resources.

*/
func (a *Client) ListSnapshots(params *ListSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*ListSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListSnapshots",
		Method:             "GET",
		PathPattern:        "/block/snapshots/bulk.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSnapshotsOK), nil
}

/*
ListVolumeSearch searches for item with name

Search resources by name, tag, project or additional parameters
(for example, wwn or initiator_port etc.)

*/
func (a *Client) ListVolumeSearch(params *ListVolumeSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ListVolumeSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVolumeSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListVolumeSearch",
		Method:             "GET",
		PathPattern:        "/block/volumes/search.json?{item}={name}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListVolumeSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListVolumeSearchOK), nil
}

/*
ListVolumes lists volumes

Retrieve all ids of this type of resources.

*/
func (a *Client) ListVolumes(params *ListVolumesParams, authInfo runtime.ClientAuthInfoWriter) (*ListVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListVolumes",
		Method:             "GET",
		PathPattern:        "/block/volumes/bulk.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListVolumesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListVolumesOK), nil
}

/*
Login logins and get token

Authenticates the user and obtains authentication token to use in
subsequent api calls. If valid X-SDS-AUTH-TOKEN is provided, that will be
used instead of creating the new authentication token. Setting the
queryParam "using-cookies" to "true" sets the following cookies in the
response.

*/
func (a *Client) Login(params *LoginParams, authInfo runtime.ClientAuthInfoWriter) (*LoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Login",
		Method:             "GET",
		PathPattern:        "/login.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LoginReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*LoginOK), nil
}

/*
ShowSnapshot shows snapshot

Show snapshot details.

*/
func (a *Client) ShowSnapshot(params *ShowSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*ShowSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShowSnapshot",
		Method:             "GET",
		PathPattern:        "/block/snapshots/{id}.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShowSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShowSnapshotOK), nil
}

/*
ShowTask shows task

Show Task details.

*/
func (a *Client) ShowTask(params *ShowTaskParams, authInfo runtime.ClientAuthInfoWriter) (*ShowTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShowTask",
		Method:             "GET",
		PathPattern:        "/vdc/tasks/{id}.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShowTaskReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShowTaskOK), nil
}

/*
ShowVolume shows volume

Show the details of a specific volume

*/
func (a *Client) ShowVolume(params *ShowVolumeParams, authInfo runtime.ClientAuthInfoWriter) (*ShowVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShowVolume",
		Method:             "GET",
		PathPattern:        "/block/volumes/{id}.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShowVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShowVolumeOK), nil
}

/*
ShowVolumeExports shows volume exports

"Return all the export information related to this volume.
This will be in the form of a list of initiator / target pairs for all the
initiators that have been paired with a target storage port."

*/
func (a *Client) ShowVolumeExports(params *ShowVolumeExportsParams, authInfo runtime.ClientAuthInfoWriter) (*ShowVolumeExportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowVolumeExportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShowVolumeExports",
		Method:             "GET",
		PathPattern:        "/block/volumes/{id}/exports.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShowVolumeExportsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShowVolumeExportsOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
