package volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new volume API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for volume API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateVolume creates volume

"The fundamental abstraction in the Block Store is a volume.
A volume is a unit of block storage capacity that has been allocated by
a consumer to a project. This API allows the user to create one or more
volumes. The volumes are created in the same storage pool.
NOTE=This is an asynchronous operation."

*/
func (a *Client) CreateVolume(params *CreateVolumeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateVolume",
		Method:             "POST",
		PathPattern:        "/block/volumes.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateVolumeOK), nil
}

/*
CreateVolumeSnapshot creates volume snapshot

A snapshot is a point-in-time copy of a volume. Snapshots are intended
for short-term operational recovery and are typically implemented using
lightweight, fast capabilities native to the underlying storage
platforms. Like a volume, a snapshot can be exported to initiators,
and you can delete it. A snapshots lifetime is tied to the original
volume. When the original volume is deleted all of its snapshots will
also be deleted. A snapshot is associated with the same project as the
original volume. A volume may be restored in place based on a snapshot.
The snapshot must have come from the volume. A new volume may be created
 using a snapshot as a template. See multi-volume consistent snapshots
 for a description of an advanced feature to snapshot multiple volumes
 at once. NOTE: This is an asynchronous operation.

*/
func (a *Client) CreateVolumeSnapshot(params *CreateVolumeSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*CreateVolumeSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVolumeSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateVolumeSnapshot",
		Method:             "POST",
		PathPattern:        "/block/volumes/{id}/protection/snapshots.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateVolumeSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateVolumeSnapshotOK), nil
}

/*
DeleteVolume deletes volume

Deactivate a volume, this will move the volume to a "marked-for-delete"
state after the deletion happens on the array side. The volume will be
deleted from the database when all references to this volume of type
BlockSnapshot and ExportGroup are deleted. If "?force=true" is added to
the path, it will force the delete of internal volumes that have the
SUPPORTS_FORCE flag. NOTE: This is an asynchronous operation.

*/
func (a *Client) DeleteVolume(params *DeleteVolumeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVolume",
		Method:             "POST",
		PathPattern:        "/block/volumes/{id}/deactivate.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVolumeOK), nil
}

/*
ExpandVolume expands volume

"Request to expand volume capacity to the specified size.
NOTE: This is an asynchronous operation."

*/
func (a *Client) ExpandVolume(params *ExpandVolumeParams, authInfo runtime.ClientAuthInfoWriter) (*ExpandVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpandVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExpandVolume",
		Method:             "POST",
		PathPattern:        "/block/volumes/{id}/expand.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExpandVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExpandVolumeOK), nil
}

/*
ListVolumeSearch searches for item with name

Search resources by name, tag, project or additional parameters
(for example, wwn or initiator_port etc.)

*/
func (a *Client) ListVolumeSearch(params *ListVolumeSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ListVolumeSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVolumeSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListVolumeSearch",
		Method:             "GET",
		PathPattern:        "/block/volumes/search.json?{item}={name}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListVolumeSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListVolumeSearchOK), nil
}

/*
ListVolumes lists volumes

Retrieve all ids of this type of resources.

*/
func (a *Client) ListVolumes(params *ListVolumesParams, authInfo runtime.ClientAuthInfoWriter) (*ListVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListVolumes",
		Method:             "GET",
		PathPattern:        "/block/volumes/bulk.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListVolumesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListVolumesOK), nil
}

/*
ShowVolume shows volume

Show the details of a specific volume

*/
func (a *Client) ShowVolume(params *ShowVolumeParams, authInfo runtime.ClientAuthInfoWriter) (*ShowVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShowVolume",
		Method:             "GET",
		PathPattern:        "/block/volumes/{id}.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShowVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShowVolumeOK), nil
}

/*
ShowVolumeExports shows volume exports

"Return all the export information related to this volume.
This will be in the form of a list of initiator / target pairs for all the
initiators that have been paired with a target storage port."

*/
func (a *Client) ShowVolumeExports(params *ShowVolumeExportsParams, authInfo runtime.ClientAuthInfoWriter) (*ShowVolumeExportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowVolumeExportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShowVolumeExports",
		Method:             "GET",
		PathPattern:        "/block/volumes/{id}/exports.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShowVolumeExportsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShowVolumeExportsOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
