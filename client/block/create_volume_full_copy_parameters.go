package block

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/victorock/gocoprhd/models"
)

// NewCreateVolumeFullCopyParams creates a new CreateVolumeFullCopyParams object
// with the default values initialized.
func NewCreateVolumeFullCopyParams() *CreateVolumeFullCopyParams {
	var ()
	return &CreateVolumeFullCopyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateVolumeFullCopyParamsWithTimeout creates a new CreateVolumeFullCopyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateVolumeFullCopyParamsWithTimeout(timeout time.Duration) *CreateVolumeFullCopyParams {
	var ()
	return &CreateVolumeFullCopyParams{

		timeout: timeout,
	}
}

/*CreateVolumeFullCopyParams contains all the parameters to send to the API endpoint
for the create volume full copy operation typically these are written to a http.Request
*/
type CreateVolumeFullCopyParams struct {

	/*Body*/
	Body *models.CreateVolumeFullCopy
	/*ID
	  The URN of a ViPR/CoprHD Task

	*/
	ID string

	timeout time.Duration
}

// WithBody adds the body to the create volume full copy params
func (o *CreateVolumeFullCopyParams) WithBody(Body *models.CreateVolumeFullCopy) *CreateVolumeFullCopyParams {
	o.Body = Body
	return o
}

// WithID adds the id to the create volume full copy params
func (o *CreateVolumeFullCopyParams) WithID(ID string) *CreateVolumeFullCopyParams {
	o.ID = ID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *CreateVolumeFullCopyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Body == nil {
		o.Body = new(models.CreateVolumeFullCopy)
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
