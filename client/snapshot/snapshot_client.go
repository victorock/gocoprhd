package snapshot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new snapshot API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for snapshot API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateSnapshotFullCopy creates full copy

Create a full copy as a volume of the specified snapshot.

*/
func (a *Client) CreateSnapshotFullCopy(params *CreateSnapshotFullCopyParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSnapshotFullCopyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSnapshotFullCopyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateSnapshotFullCopy",
		Method:             "POST",
		PathPattern:        "/block/snapshots/{id}/protection/full-copies.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateSnapshotFullCopyReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSnapshotFullCopyOK), nil
}

/*
DeleteSnapshot deactivates snapshot

Deactivate volume snapshot, this will move the snapshot to a
"marked-for-delete" state. It will be deleted by the garbage collector
on a subsequent iteration If this snapshot was created from a volume
that is part of a consistency group, then all the related snapshots
will be deactivated, as well.

*/
func (a *Client) DeleteSnapshot(params *DeleteSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSnapshot",
		Method:             "POST",
		PathPattern:        "/block/snapshots/{id}/deactivate.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSnapshotOK), nil
}

/*
ListSnapshots lists snapshots

Retrieve all ids of this type of resources.

*/
func (a *Client) ListSnapshots(params *ListSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*ListSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListSnapshots",
		Method:             "GET",
		PathPattern:        "/block/snapshots/bulk.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSnapshotsOK), nil
}

/*
ShowSnapshot shows snapshot

Show snapshot details.

*/
func (a *Client) ShowSnapshot(params *ShowSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*ShowSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShowSnapshot",
		Method:             "GET",
		PathPattern:        "/block/snapshots/{id}.json",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ShowSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShowSnapshotOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
