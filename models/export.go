package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

/*Export export

swagger:model Export
*/
type Export struct {
	Resource

	/* inactive
	 */
	Inactive bool `json:"inactive,omitempty"`

	/* initiators
	 */
	Initiators []*Initiator `json:"initiators,omitempty"`

	/* tags
	 */
	Tags []string `json:"tags,omitempty"`

	/* volumes
	 */
	Volumes []*ExportVolumesItems0 `json:"volumes,omitempty"`
}

// Validate validates this export
func (m *Export) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Export) validateInitiators(formats strfmt.Registry) error {

	for i := 0; i < len(m.Initiators); i++ {

		if swag.IsZero(m.Initiators[i]) { // not required
			continue
		}

		if m.Initiators[i] != nil {

			if err := m.Initiators[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Export) validateTags(formats strfmt.Registry) error {

	return nil
}

func (m *Export) validateVolumes(formats strfmt.Registry) error {

	for i := 0; i < len(m.Volumes); i++ {

		if swag.IsZero(m.Volumes[i]) { // not required
			continue
		}

		if m.Volumes[i] != nil {

			if err := m.Volumes[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

/*ExportVolumesItems0 export volumes items0

swagger:model ExportVolumesItems0
*/
type ExportVolumesItems0 struct {

	/* id
	 */
	ID string `json:"id,omitempty"`

	/* lun
	 */
	Lun string `json:"lun,omitempty"`
}

// Validate validates this export volumes items0
func (m *ExportVolumesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
