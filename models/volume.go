package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Volume volume

swagger:model Volume
*/
type Volume struct {
	Resource

	/* access state
	 */
	AccessState string `json:"access_state,omitempty"`

	/* allocated capacity gb
	 */
	AllocatedCapacityGb string `json:"allocated_capacity_gb,omitempty"`

	/* creation time
	 */
	CreationTime int64 `json:"creation_time,omitempty"`

	/* device label
	 */
	DeviceLabel string `json:"device_label,omitempty"`

	/* global
	 */
	Global bool `json:"global,omitempty"`

	/* high availability backing volumes
	 */
	HighAvailabilityBackingVolumes []string `json:"high_availability_backing_volumes,omitempty"`

	/* inactive
	 */
	Inactive bool `json:"inactive,omitempty"`

	/* internal
	 */
	Internal bool `json:"internal,omitempty"`

	/* is composite
	 */
	IsComposite bool `json:"is_composite,omitempty"`

	/* native id
	 */
	NativeID string `json:"native_id,omitempty"`

	/* pre allocation size gb
	 */
	PreAllocationSizeGb string `json:"pre_allocation_size_gb,omitempty"`

	/* project
	 */
	Project *Resource `json:"project,omitempty"`

	/* protection
	 */
	Protection *Resource `json:"protection,omitempty"`

	/* protocols
	 */
	Protocols []string `json:"protocols,omitempty"`

	/* provisioned capacity gb
	 */
	ProvisionedCapacityGb string `json:"provisioned_capacity_gb,omitempty"`

	/* remote
	 */
	Remote bool `json:"remote,omitempty"`

	/* replication group instance
	 */
	ReplicationGroupInstance string `json:"replication_group_instance,omitempty"`

	/* requested capacity gb
	 */
	RequestedCapacityGb string `json:"requested_capacity_gb,omitempty"`

	/* storage controller
	 */
	StorageController string `json:"storage_controller,omitempty"`

	/* storage pool
	 */
	StoragePool *Resource `json:"storage_pool,omitempty"`

	/* supports snapshot sessions
	 */
	SupportsSnapshotSessions bool `json:"supports_snapshot_sessions,omitempty"`

	/* system type
	 */
	SystemType string `json:"system_type,omitempty"`

	/* tags
	 */
	Tags []string `json:"tags,omitempty"`

	/* tenant
	 */
	Tenant *Resource `json:"tenant,omitempty"`

	/* thinly provisioned
	 */
	ThinlyProvisioned bool `json:"thinly_provisioned,omitempty"`

	/* varray
	 */
	Varray *Resource `json:"varray,omitempty"`

	/* vdc
	 */
	Vdc *Resource `json:"vdc,omitempty"`

	/* volume groups
	 */
	VolumeGroups []string `json:"volume_groups,omitempty"`

	/* vpool
	 */
	Vpool *Resource `json:"vpool,omitempty"`

	/* wwn
	 */
	Wwn string `json:"wwn,omitempty"`
}

// Validate validates this volume
func (m *Volume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.Resource.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighAvailabilityBackingVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocols(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVarray(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Volume) validateHighAvailabilityBackingVolumes(formats strfmt.Registry) error {

	return nil
}

func (m *Volume) validateProject(formats strfmt.Registry) error {

	if m.Project != nil {

		if err := m.Project.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Volume) validateProtection(formats strfmt.Registry) error {

	if m.Protection != nil {

		if err := m.Protection.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

var volumeProtocolsItemsEnum []interface{}

func (m *Volume) validateProtocolsItemsEnum(path, location string, value string) error {
	if volumeProtocolsItemsEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["FC","iSCSI","ScaleIO"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			volumeProtocolsItemsEnum = append(volumeProtocolsItemsEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, volumeProtocolsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *Volume) validateProtocols(formats strfmt.Registry) error {

	for i := 0; i < len(m.Protocols); i++ {

		// value enum
		if err := m.validateProtocolsItemsEnum("protocols"+"."+strconv.Itoa(i), "body", m.Protocols[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *Volume) validateStoragePool(formats strfmt.Registry) error {

	if m.StoragePool != nil {

		if err := m.StoragePool.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Volume) validateTags(formats strfmt.Registry) error {

	return nil
}

func (m *Volume) validateTenant(formats strfmt.Registry) error {

	if m.Tenant != nil {

		if err := m.Tenant.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Volume) validateVarray(formats strfmt.Registry) error {

	if m.Varray != nil {

		if err := m.Varray.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Volume) validateVdc(formats strfmt.Registry) error {

	if m.Vdc != nil {

		if err := m.Vdc.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Volume) validateVolumeGroups(formats strfmt.Registry) error {

	return nil
}

func (m *Volume) validateVpool(formats strfmt.Registry) error {

	if m.Vpool != nil {

		if err := m.Vpool.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
